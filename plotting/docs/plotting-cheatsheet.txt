PLOTTING CHEATSHEET

TABLE OF CONTENTS
=================
1. Installation & Import
2. Basic Plotting with Matplotlib
3. Figure & Axes Management
4. Line Plots
5. Scatter Plots
6. Bar Plots
7. Histograms & Distributions
8. Seaborn Statistical Plots
9. Subplots & Layout
10. Customization & Styling

==========================================
1. INSTALLATION & IMPORT
==========================================

$ pip install matplotlib seaborn
    - Installs matplotlib and seaborn libraries

import matplotlib.pyplot as plt
import seaborn as sns
    - Standard imports for plotting
    - plt is the standard alias for matplotlib.pyplot
    - sns is the standard alias for seaborn

plt.style.use('default')
    - Set plotting style (default, ggplot, seaborn, etc.)


==========================================
2. BASIC PLOTTING WITH MATPLOTLIB
==========================================

FIGURE AND AXES:
fig, ax = plt.subplots()
    - Creates figure and axes objects
    - fig: container for all plot elements
    - ax: individual plot area

plt.figure(figsize=(10, 6))
    - Create figure with specific size (width, height)

SAVING PLOTS:
plt.savefig('plot.png', dpi=300, bbox_inches='tight')
    - Save plot to file
    - dpi: resolution (dots per inch)
    - bbox_inches='tight': remove extra whitespace

DISPLAYING PLOTS:
plt.show()
    - Display the plot (required in some environments)

plt.close()
    - Close figure to free memory


==========================================
3. FIGURE & AXES MANAGEMENT
==========================================

CREATING SUBPLOTS:
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
    - Create 1 row, 2 columns of subplots

fig, axes = plt.subplots(2, 3, figsize=(15, 10))
    - Create 2 rows, 3 columns of subplots
    - axes is a 2D array of axes objects

GRID LAYOUT:
fig = plt.figure(figsize=(10, 8))
gs = fig.add_gridspec(2, 2, hspace=0.3, wspace=0.3)
ax1 = fig.add_subplot(gs[0, :])
ax2 = fig.add_subplot(gs[1, 0])
ax3 = fig.add_subplot(gs[1, 1])
    - More flexible subplot layout
    - hspace/wspace: spacing between subplots

CLEARING PLOTS:
ax.clear()
    - Clear current axes

plt.clf()
    - Clear current figure

plt.cla()
    - Clear current axes


==========================================
4. LINE PLOTS
==========================================

BASIC LINE PLOT:
ax.plot(x, y, 'b-', linewidth=2, label='Data')
    - Plot line with blue color and linewidth 2
    - 'b-': blue solid line
    - 'r--': red dashed line
    - 'g:': green dotted line

MULTIPLE LINES:
ax.plot(x, y1, 'b-', label='Line 1')
ax.plot(x, y2, 'r--', label='Line 2')
ax.legend()
    - Plot multiple lines with legend

LINE STYLES:
'-'     Solid line
'--'    Dashed line
':'     Dotted line
'-.'    Dash-dot line

MARKERS:
ax.plot(x, y, 'o-', markersize=8)
    - 'o': circle markers
    - 's': square markers
    - '^': triangle markers
    - 'D': diamond markers

COLORS:
'red', 'blue', 'green', 'black', 'yellow'
    - Named colors

'#FF0000', '#0000FF'
    - Hex color codes

'C0', 'C1', 'C2'
    - Default color cycle


==========================================
5. SCATTER PLOTS
==========================================

BASIC SCATTER PLOT:
ax.scatter(x, y, s=50, c='blue', alpha=0.6)
    - s: marker size
    - c: color
    - alpha: transparency (0-1)

COLOR MAPPING:
scatter = ax.scatter(x, y, c=values, cmap='viridis')
plt.colorbar(scatter)
    - Color points by a third variable
    - cmap: color map ('viridis', 'plasma', 'coolwarm')

SIZE MAPPING:
ax.scatter(x, y, s=sizes, c=colors, alpha=0.6)
    - Size points by a variable

SEABORN SCATTER:
sns.scatterplot(data=df, x='x_col', y='y_col', hue='category')
    - Seaborn scatter with automatic legend

sns.regplot(data=df, x='x_col', y='y_col')
    - Scatter plot with regression line


==========================================
6. BAR PLOTS
==========================================

VERTICAL BAR PLOT:
ax.bar(x, heights, width=0.8, color='blue')
    - width: bar width (0-1)

HORIZONTAL BAR PLOT:
ax.barh(y, widths, height=0.8)
    - height: bar height (0-1)

GROUPED BAR PLOT:
x = np.arange(len(categories))
width = 0.35
ax.bar(x - width/2, values1, width, label='Group 1')
ax.bar(x + width/2, values2, width, label='Group 2')
ax.set_xticks(x)
ax.set_xticklabels(categories)

STACKED BAR PLOT:
ax.bar(x, bottom_values, label='Bottom')
ax.bar(x, top_values, bottom=bottom_values, label='Top')

SEABORN BAR PLOT:
sns.barplot(data=df, x='category', y='value')
    - Statistical bar plot with error bars

sns.countplot(data=df, x='category')
    - Count plot (bar plot of counts)


==========================================
7. HISTOGRAMS & DISTRIBUTIONS
==========================================

HISTOGRAM:
ax.hist(data, bins=30, alpha=0.7, color='blue')
    - bins: number of bins or bin edges
    - alpha: transparency

DENSITY PLOT:
ax.hist(data, bins=30, density=True, alpha=0.7)
    - density=True: normalize to area=1

SEABORN DISTRIBUTION PLOTS:
sns.histplot(data=data, bins=30, kde=True)
    - Histogram with kernel density estimate

sns.kdeplot(data=data)
    - Kernel density estimation plot

sns.boxplot(data=df, x='category', y='value')
    - Box plot

sns.violinplot(data=df, x='category', y='value')
    - Violin plot

sns.stripplot(data=df, x='category', y='value')
    - Strip plot (scatter for categorical data)


==========================================
8. SEABORN STATISTICAL PLOTS
==========================================

PAIR PLOT:
sns.pairplot(df, hue='category')
    - Matrix of scatter plots for all variables

JOINT PLOT:
sns.jointplot(data=df, x='x_col', y='y_col', kind='scatter')
    - Scatter plot with marginal distributions
    - kind: 'scatter', 'hex', 'kde', 'reg'

FACET GRID:
g = sns.FacetGrid(df, col='category', row='group')
g.map(plt.scatter, 'x_col', 'y_col')
    - Create subplots based on categorical variables

CATEGORICAL PLOTS:
sns.catplot(data=df, x='category', y='value', kind='box')
    - Categorical plotting function
    - kind: 'box', 'violin', 'strip', 'bar'

HEATMAP:
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
    - Correlation matrix or any 2D data
    - annot=True: show values in cells


==========================================
9. SUBPLOTS & LAYOUT
==========================================

BASIC SUBPLOTS:
fig, axes = plt.subplots(2, 2, figsize=(12, 8))
axes[0, 0].plot(x, y)
axes[0, 1].scatter(x, y)
axes[1, 0].hist(data)
axes[1, 1].bar(categories, values)

UNEVEN SUBPLOTS:
fig = plt.figure(figsize=(12, 8))
gs = fig.add_gridspec(3, 3)
ax1 = fig.add_subplot(gs[0, :2])
ax2 = fig.add_subplot(gs[0, 2])
ax3 = fig.add_subplot(gs[1:, :])

INSET PLOTS:
axins = ax.inset_axes([0.6, 0.6, 0.35, 0.35])
    - Create inset axes within existing axes
    - [x, y, width, height] in axes coordinates

TIGHT LAYOUT:
plt.tight_layout()
    - Automatically adjust subplot parameters

plt.subplots_adjust(hspace=0.3, wspace=0.3)
    - Manually adjust spacing


==========================================
10. CUSTOMIZATION & STYLING
==========================================

TITLES AND LABELS:
ax.set_title('Plot Title', fontsize=14, fontweight='bold')
ax.set_xlabel('X Axis Label')
ax.set_ylabel('Y Axis Label')

TICKS AND TICK LABELS:
ax.set_xticks([0, 1, 2, 3])
ax.set_xticklabels(['A', 'B', 'C', 'D'])
ax.tick_params(axis='both', labelsize=12)

GRID:
ax.grid(True, alpha=0.3)
    - Add grid with transparency

LEGEND:
ax.legend(loc='upper right', fontsize=12)
    - loc: 'upper right', 'lower left', 'center', etc.

TEXT ANNOTATION:
ax.text(x, y, 'Annotation', fontsize=12)
ax.annotate('Point', xy=(x, y), xytext=(x+1, y+1),
            arrowprops=dict(arrowstyle='->'))

STYLING:
plt.style.use('seaborn')
    - Apply predefined style

sns.set_theme(style="whitegrid")
    - Set seaborn theme

COLOR PALETTES:
sns.color_palette("husl", 8)
    - Create custom color palette
    - "husl", "hls", "Set1", "Set2", etc.

FONT SETTINGS:
plt.rcParams['font.size'] = 12
plt.rcParams['font.family'] = 'serif'
    - Set global font parameters 